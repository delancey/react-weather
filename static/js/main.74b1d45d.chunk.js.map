{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","getTime","zone","tz","lookup","zip","now","Moment","format","setState","time","forecast","document","getElementById","value","fetch","then","response","status","json","data","console","log","timezone","city","name","country","sys","lat","coord","lon","temperature","Math","round","main","temp","humidity","description","weather","icon","error","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"uQA6EeA,E,4MAtEfC,MAAQ,G,EAERC,QAAU,WACR,IAAMC,EAAOC,IAAGC,OAAO,EAAKJ,MAAMK,KAC5BC,EAAMC,MAASJ,GAAGD,GAAMM,OAAO,iCAErC,EAAKC,SAAS,CAEZC,KAAMJ,K,EAIVK,SAAW,WACP,IAAMN,EAAMO,SAASC,eAAe,OAAOC,MAI3CC,MAFe,sDAAsDV,EAAtD,2DAGZW,MAAK,SAACC,GACmB,MAApBA,EAASC,OAMbD,EAASE,OAAOH,MAAK,SAACI,GACpBC,QAAQC,IAAIF,GACZ,EAAKX,SAAS,CACVJ,IAAKA,EACLkB,SAAUH,EAAKG,SACfC,KAAMJ,EAAKK,KACXC,QAASN,EAAKO,IAAID,QAClBE,IAAKR,EAAKS,MAAMD,IAChBE,IAAKV,EAAKS,MAAMC,IAChBC,YAAa,gBAAkBC,KAAKC,MAAMb,EAAKc,KAAKC,MAAM,OAC1DC,SAAU,aAAehB,EAAKc,KAAKE,SACnCC,YAAajB,EAAKkB,QAAQ,GAAGD,YAC7BE,KAAMnB,EAAKkB,QAAQ,GAAGC,KACtBC,MAAO,kCAGV,EAAKvC,aArBNoB,QAAQC,IAAIL,EAASC,OAAS,oD,uDA2BpC,OACE,yBAAK,UAAU,aACb,6BACE,2BAAO,KAAO,OAAQ,GAAG,QACzB,4BAAQ,QAAW,KAAKP,UAAxB,UACA,6BAAM8B,KAAKzC,MAAMwB,MACjB,6BAAMiB,KAAKzC,MAAM0B,SACjB,6BAAMe,KAAKzC,MAAM+B,aACjB,6BAAMU,KAAKzC,MAAMoC,UACjB,6BAAM,KAAKpC,MAAMqC,cAGjB,6BAAM,KAAKrC,MAAMU,W,GA5DTgC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtC,SAASC,eAAe,SDwHpB,kBAAmBsC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhB,GACLnB,QAAQmB,MAAMA,EAAMiB,a","file":"static/js/main.74b1d45d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Moment from \"moment\";\nimport \"moment-timezone\";\nimport tz from \"zipcode-to-timezone\";\n\n\nclass App extends Component {\nstate = {}; //leave this blank because it will pull from the argument that you pass through\n  \ngetTime = () => {\n  const zone = tz.lookup(this.state.zip); //uses zipcode-to-timezone to find timezone of the zip input\n  const now = Moment().tz(zone).format(\"dddd, MMMM Do YYYY, h:mm:ss a\"); // uses \"moment\" to find current date/time then timezone in input using variable above \n  \n  this.setState({\n    // sets as state to call back in render\n    time: now,\n  });\n};\n\nforecast = () => {\n    const zip = document.getElementById(\"zip\").value;\n    var api_key= \"9ac5bc3be4129c77500db64422716a04\";\n    var api_call = \"http://api.openweathermap.org/data/2.5/weather?zip=\"+zip + \",&units=imperial&appid=\"+api_key;\n\n    fetch(api_call)\n      .then((response) => {\n        if (response.status !== 200) {\n          console.log(response.status + \"Please wait awhile or enter a valid zip code\"\n          );\n          return;\n        }\n\n        response.json().then((data) => {\n          console.log(data)\n          this.setState({\n              zip: zip,\n              timezone: data.timezone,\n              city: data.name,\n              country: data.sys.country,\n              lat: data.coord.lat,\n              lon: data.coord.lon,\n              temperature: \"temperature: \" + Math.round(data.main.temp)+\"°\",\n              humidity: \"humidity: \" + data.main.humidity,\n              description: data.weather[0].description,\n              icon: data.weather[0].icon,\n              error: \"Please enter a valid zip code\" \n           });\n           this.getTime();\n      });      \n    });   \n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div>\n          <input type = 'text'  id=\"zip\" />\n          <button onClick = {this.forecast}>Submit</button>\n          <div>{this.state.city}</div>\n          <div>{this.state.country}</div>\n          <div>{this.state.temperature}</div>\n          <div>{this.state.humidity}</div>\n          <div>{this.state.description}</div>         \n        </div>\n\n          <div>{this.state.time}</div>        \n\n          \n      </div>\n    );\n  } //end of return\n    // )\n  // }//end of render\n \n}// end of class component\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}